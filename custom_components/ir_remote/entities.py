"""IR Remote entities for Home Assistant - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""
import logging
from typing import Any, Optional

from homeassistant.components.select import SelectEntity
from homeassistant.components.text import TextEntity
from homeassistant.components.button import ButtonEntity
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.entity import DeviceInfo
from homeassistant.helpers.update_coordinator import CoordinatorEntity, DataUpdateCoordinator
from homeassistant.helpers import entity_registry as er

from .const import (
    DOMAIN,
    CONF_IEEE,
    CONF_ENDPOINT,
    CONF_CLUSTER,
    DEFAULT_CLUSTER_TYPE,
    DEFAULT_COMMAND_TYPE,
    ATTR_DEVICE,
    ATTR_BUTTON,
    ATTR_CODE,
    ZHA_COMMAND_LEARN,
    ZHA_COMMAND_SEND,
)

_LOGGER = logging.getLogger(__name__)


class IRRemoteCoordinatorEntity(CoordinatorEntity):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π IR Remote —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º."""
    
    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        super().__init__(coordinator)
        
        self.config_entry = config_entry  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        entry_id = config_entry.entry_id
        self._attr_unique_id = f"{DOMAIN}_{entry_id}_{unique_id_suffix}"
        self._attr_name = name
        self._attr_has_entity_name = True
        self._attr_entity_category = None
        self._attr_should_poll = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º device_info –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
        self._attr_device_info = DeviceInfo(
            identifiers={(DOMAIN, entry_id)},
            name="–ò–ö-–ø—É–ª—å—Ç",
            manufacturer="IR Remote Integration",
            model="IR Controller", 
            sw_version="1.2.0",
        )
        
        _LOGGER.debug("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å: unique_id=%s, name=%s", self._attr_unique_id, name)
    
    @property
    def available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏."""
        # –°—É—â–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
        # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
        if not self.coordinator.last_update_success:
            _LOGGER.debug("‚ö†Ô∏è –°—É—â–Ω–æ—Å—Ç—å %s –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ", self._attr_unique_id)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if self.coordinator.data is None:
            _LOGGER.debug("‚ö†Ô∏è –°—É—â–Ω–æ—Å—Ç—å %s –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ None", self._attr_unique_id)
            return False
            
        return True


class IRRemoteDeviceSelector(IRRemoteCoordinatorEntity, SelectEntity):
    """–°–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤ IR Remote."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
        device_type: str = "send",
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self.device_type = device_type
        self._attr_translation_key = f"{device_type}_device"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        self._attr_options = ["none"]
        self._attr_current_option = "none"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
        self._update_options_from_coordinator()
        
        _LOGGER.debug("üîΩ –°–æ–∑–¥–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤: type=%s, unique_id=%s, options=%s", 
                    device_type, self._attr_unique_id, self._attr_options)

    def _update_options_from_coordinator(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if (self.coordinator.data and 
            isinstance(self.coordinator.data, dict) and 
            "devices" in self.coordinator.data):
            
            devices = self.coordinator.data["devices"]
            if isinstance(devices, list) and devices:
                self._attr_options = devices
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –æ–ø—Ü–∏—è –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞
                if self._attr_current_option not in devices:
                    self._attr_current_option = "none"
                _LOGGER.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ %s: %s", self.device_type, devices)
            else:
                _LOGGER.debug("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        else:
            _LOGGER.debug("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

    @callback
    def _handle_coordinator_update(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        _LOGGER.debug("üîÑ –°–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤ %s –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", self._attr_unique_id)
        self._update_options_from_coordinator()
        self.async_write_ha_state()

    async def async_select_option(self, option: str) -> None:
        """–í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ."""
        if option not in self._attr_options:
            _LOGGER.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è %s –Ω–µ –≤ %s", option, self._attr_options)
            return
            
        self._attr_current_option = option
        self.async_write_ha_state()
        
        _LOGGER.debug("üéØ –û–ø—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: %s", option)
        
        if self.device_type == "send":
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
            entity_registry = er.async_get(self.hass)
            command_selector_id = None
            
            for entity_id, entity_entry in entity_registry.entities.items():
                if (entity_entry.config_entry_id == self.config_entry.entry_id and
                    "command_selector" in entity_entry.unique_id):
                    command_selector_id = entity_id
                    break
            
            if command_selector_id:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏
                entity = self.hass.data["entity_components"]["select"].get_entity(command_selector_id)
                if entity and hasattr(entity, 'async_update_commands'):
                    _LOGGER.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", option)
                    await entity.async_update_commands(option)
                else:
                    _LOGGER.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –º–µ—Ç–æ–¥ async_update_commands")


class IRRemoteCommandSelector(IRRemoteCoordinatorEntity, SelectEntity):
    """–°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ IR Remote."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_translation_key = "send_command"
        self._device = "none"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        self._attr_options = ["none"]
        self._attr_current_option = "none"
        
        _LOGGER.debug("üîΩ –°–æ–∑–¥–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥: unique_id=%s", self._attr_unique_id)

    @callback
    def _handle_coordinator_update(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if (self._device != "none" and 
            self.coordinator.data and 
            isinstance(self.coordinator.data, dict) and
            "commands" in self.coordinator.data):
            
            commands_data = self.coordinator.data["commands"]
            if isinstance(commands_data, dict):
                commands = commands_data.get(self._device, ["none"])
                if isinstance(commands, list):
                    self._attr_options = commands
                    
                    if self._attr_current_option not in commands:
                        self._attr_current_option = "none"
                    
                    _LOGGER.debug("üîÑ –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s: %s", 
                                self._device, commands)
                    self.async_write_ha_state()

    async def async_select_option(self, option: str) -> None:
        """–í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ."""
        if option not in self._attr_options:
            _LOGGER.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã %s –Ω–µ –≤ %s", option, self._attr_options)
            return
            
        self._attr_current_option = option
        self.async_write_ha_state()
        
        _LOGGER.debug("üéØ –û–ø—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: %s", option)
        
    async def async_update_commands(self, device: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        _LOGGER.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", device)
        self._device = device
        
        if (device == "none" or 
            not self.coordinator.data or 
            not isinstance(self.coordinator.data, dict) or
            "commands" not in self.coordinator.data):
            self._attr_options = ["none"]
            _LOGGER.debug("üîÑ –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", device)
        else:
            commands_data = self.coordinator.data["commands"]
            if isinstance(commands_data, dict):
                commands = commands_data.get(device, ["none"])
                if isinstance(commands, list):
                    self._attr_options = commands
                    _LOGGER.debug("üîÑ –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s: %s", device, commands)
                else:
                    self._attr_options = ["none"]
            else:
                self._attr_options = ["none"]
        
        self._attr_current_option = "none"
        self.async_write_ha_state()


class IRRemoteButtonInput(IRRemoteCoordinatorEntity, TextEntity):
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_native_value = ""
        self._attr_translation_key = "button_name"
        self._attr_mode = "text"
        
        _LOGGER.debug("üìù –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏: unique_id=%s", self._attr_unique_id)

    async def async_set_value(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        _LOGGER.debug("üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –∫–Ω–æ–ø–∫–∏: '%s'", value)
        self._attr_native_value = value
        self.async_write_ha_state()


class IRRemoteNewDeviceInput(IRRemoteCoordinatorEntity, TextEntity):
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_native_value = ""
        self._attr_translation_key = "new_device_name"
        self._attr_mode = "text"
        
        _LOGGER.debug("üìù –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: unique_id=%s", self._attr_unique_id)

    async def async_set_value(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        _LOGGER.debug("üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: '%s'", value)
        self._attr_native_value = value
        self.async_write_ha_state()


class IRRemoteLearnButton(IRRemoteCoordinatorEntity, ButtonEntity):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –ò–ö-–∫–æ–¥—É."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_translation_key = "learn_button"
        
        _LOGGER.debug("üéì –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è: unique_id=%s", self._attr_unique_id)

    async def async_press(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
        _LOGGER.info("üéì –ö–ù–û–ü–ö–ê –û–ë–£–ß–ï–ù–ò–Ø –ù–ê–ñ–ê–¢–ê")
        
        device_selector = None
        button_input = None
        entity_registry = er.async_get(self.hass)
        
        _LOGGER.debug("üîç –ü–æ–∏—Å–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏...")
        
        for entity_id, entity_entry in entity_registry.entities.items():
            if entity_entry.config_entry_id == self.config_entry.entry_id:
                if "learn_device" in entity_entry.unique_id:
                    entity = self.hass.states.get(entity_id)
                    if entity:
                        device_selector = entity
                        _LOGGER.debug("üìã –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s = %s", entity_id, entity.state)
                elif "button_input" in entity_entry.unique_id:
                    entity = self.hass.states.get(entity_id)
                    if entity:
                        button_input = entity
                        _LOGGER.debug("üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏: %s = %s", entity_id, entity.state)
        
        if not device_selector or not button_input:
            _LOGGER.error("‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: device_selector=%s, button_input=%s", 
                         device_selector is not None, button_input is not None)
            return
        
        device = device_selector.state if device_selector else "none"
        button = button_input.state if button_input else ""
        
        _LOGGER.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ='%s', –∫–Ω–æ–ø–∫–∞='%s'", device, button)
        
        if device == "none" or not button:
            _LOGGER.warning("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ: device=%s, button='%s'", device, button)
            return
        
        try:
            _LOGGER.info("üöÄ –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
            await self.hass.services.async_call(
                DOMAIN,
                "learn_code",
                {
                    ATTR_DEVICE: device,
                    ATTR_BUTTON: button,
                },
                blocking=True
            )
            _LOGGER.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            _LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è: %s", e, exc_info=True)


class IRRemoteSendButton(IRRemoteCoordinatorEntity, ButtonEntity):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ò–ö-–∫–æ–º–∞–Ω–¥—ã."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_translation_key = "send_button"
        
        _LOGGER.debug("üì° –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: unique_id=%s", self._attr_unique_id)

    async def async_press(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
        _LOGGER.info("üì° –ö–ù–û–ü–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–û–ú–ê–ù–î–´ –ù–ê–ñ–ê–¢–ê")
        
        device_selector = None
        command_selector = None
        entity_registry = er.async_get(self.hass)
        
        _LOGGER.debug("üîç –ü–æ–∏—Å–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∫–æ–º–∞–Ω–¥—ã...")
        
        for entity_id, entity_entry in entity_registry.entities.items():
            if entity_entry.config_entry_id == self.config_entry.entry_id:
                if "send_device" in entity_entry.unique_id:
                    entity = self.hass.states.get(entity_id)
                    if entity:
                        device_selector = entity
                        _LOGGER.debug("üìã –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s = %s", entity_id, entity.state)
                elif "command_selector" in entity_entry.unique_id:
                    entity = self.hass.states.get(entity_id)
                    if entity:
                        command_selector = entity
                        _LOGGER.debug("üìã –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã: %s = %s", entity_id, entity.state)
        
        if not device_selector or not command_selector:
            _LOGGER.error("‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: device_selector=%s, command_selector=%s", 
                         device_selector is not None, command_selector is not None)
            return
        
        device = device_selector.state if device_selector else "none"
        command = command_selector.state if command_selector else "none"
        
        _LOGGER.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ='%s', –∫–æ–º–∞–Ω–¥–∞='%s'", device, command)
        
        if device == "none" or command == "none":
            _LOGGER.warning("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: device=%s, command=%s", device, command)
            return
        
        try:
            _LOGGER.info("üöÄ –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã...")
            await self.hass.services.async_call(
                DOMAIN,
                "send_command",
                {
                    ATTR_DEVICE: device,
                    "command": command,
                },
                blocking=True
            )
            _LOGGER.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            _LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: %s", e, exc_info=True)


class IRRemoteAddDeviceButton(IRRemoteCoordinatorEntity, ButtonEntity):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ò–ö-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""

    def __init__(
        self, 
        coordinator: DataUpdateCoordinator,
        config_entry: ConfigEntry,
        unique_id_suffix: str,
        name: str,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏."""
        super().__init__(coordinator, config_entry, unique_id_suffix, name)
        self._attr_translation_key = "add_device_button"
        
        _LOGGER.debug("‚ûï –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: unique_id=%s", self._attr_unique_id)

    async def async_press(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
        _LOGGER.info("‚ûï –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –£–°–¢–†–û–ô–°–¢–í–ê –ù–ê–ñ–ê–¢–ê")
        
        new_device_input = None
        entity_registry = er.async_get(self.hass)
        
        _LOGGER.debug("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        for entity_id, entity_entry in entity_registry.entities.items():
            if (entity_entry.config_entry_id == self.config_entry.entry_id and
                "new_device_input" in entity_entry.unique_id):
                entity = self.hass.states.get(entity_id)
                if entity:
                    new_device_input = entity
                    _LOGGER.debug("üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s = '%s'", entity_id, entity.state)
                break
        
        if not new_device_input:
            _LOGGER.error("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        device_name = new_device_input.state.strip() if new_device_input.state else ""
        
        _LOGGER.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: '%s'", device_name)
        
        if not device_name:
            _LOGGER.warning("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –ø—É—Å—Ç–æ–µ –∏–º—è")
            return
        
        try:
            _LOGGER.info("üöÄ –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
            await self.hass.services.async_call(
                DOMAIN,
                "add_device",
                {
                    "name": device_name
                },
                blocking=True
            )
            _LOGGER.info("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            _LOGGER.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞...")
            await self.coordinator.async_refresh()
            _LOGGER.debug("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            _LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", e, exc_info=True)


class IRRemoteDeviceButton(ButtonEntity):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ö-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""

    def __init__(
        self,
        hass: HomeAssistant,
        config_entry: ConfigEntry,
        device_name: str,
        command_name: str,
        command_data: dict,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        self.hass = hass
        self.config_entry = config_entry
        self.device_name = device_name
        self.command_name = command_name
        self.command_data = command_data
        self._attr_unique_id = f"ir_remote_{device_name}_{command_name}"
        self._attr_name = command_data.get("name", f"{device_name} {command_name}")
        self._attr_has_entity_name = True
        self._attr_should_poll = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º device_info –¥–ª—è —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self._attr_device_info = DeviceInfo(
            identifiers={(DOMAIN, f"controlled_{self.device_name}")},
            name=self.device_name.title(),
            manufacturer="IR Controlled Device",
            model="Virtual Device",
            via_device=(DOMAIN, self.config_entry.entry_id),
        )
        
        _LOGGER.debug("üîò –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: device=%s, command=%s, unique_id=%s", 
                     device_name, command_name, self._attr_unique_id)

    @property
    def available(self) -> bool:
        """–ö–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã."""
        return True

    async def async_press(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
        _LOGGER.info("üîò –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –£–°–¢–†–û–ô–°–¢–í–ê: %s - %s", self.device_name, self.command_name)
        
        code = self.command_data.get("code")
        if not code:
            _LOGGER.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ò–ö-–∫–æ–¥ –¥–ª—è %s - %s", self.device_name, self.command_name)
            return
        
        _LOGGER.debug("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ò–ö-–∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", len(code))
        
        try:
            await self.hass.services.async_call(
                DOMAIN,
                "send_code",
                {
                    ATTR_CODE: code
                },
                blocking=True
            )
            _LOGGER.info("‚úÖ –ò–ö-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è %s - %s", self.device_name, self.command_name)
        except Exception as e:
            _LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ò–ö-–∫–æ–¥–∞ –¥–ª—è %s - %s: %s", 
                         self.device_name, self.command_name, e, exc_info=True)